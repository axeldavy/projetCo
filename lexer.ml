# 1 "lexer.mll"
 
  (* partie inspirée du code du td3 *)
  open Lexing
  open Parser
  
  exception Lexing_error of string

  (* les differents token:
      tokenres = Teof | CONST of Int32.t | NAME of string | CHAINE of string 
		  | IF | THEN | ELSE | FUNCTION |STRUCT | UNION | INT | CHAR
                  | VOID | NULL | FOR | WHILE | RETURN | ARROW
		  | OVER | OVER_OR_EQUAL | EQUAL_EQUAL | EQUAL 
		  | UNDER | UNDER_OR_EQUAL | NOT_EQUAL 
                  | PARENTHESIS_OPEN | COMMA
		  | PARENTHESIS_CLOSE | INDEX_OPEN 
                  | INDEX_CLOSE | DOT | REM | AND | OR
                  | PLUS_PLUS | MINUS_MINUS | BIN_NOT | GET_ADRESS | SIZEOF
		  | STAR | PLUS | MINUS | DIV | I_DOT | SEMICOLON | COLON 
                  | OPEN_BLOCK | CLOSE_BLOCK
*)
  (* tables des mots-clés *)
  let kwd_tbl = 
    ["if", IF; "else", ELSE;
     "struct", STRUCT; "union", UNION; "int", INT; 
     "void",VOID; "char", CHAR; "for", FOR;
     "while", WHILE; "return", RETURN; "sizeof", SIZEOF;
    ]

  let id_or_kwd = 
    let h = Hashtbl.create 17 in
    List.iter (fun (s,t) -> Hashtbl.add h s t) kwd_tbl;
    fun s -> 
      try List.assoc s kwd_tbl with _ -> NAME s

  let newline lexbuf =
    let pos = lexbuf.lex_curr_p in
    lexbuf.lex_curr_p <- 
      { pos with pos_lnum = pos.pos_lnum + 1; pos_bol = pos.pos_cnum }


# 43 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base = 
   "\000\000\213\255\002\000\020\000\218\255\219\255\220\255\020\000\
    \227\255\228\255\229\255\230\255\231\255\232\255\233\255\003\000\
    \031\000\033\000\035\000\082\000\081\000\087\000\246\255\110\000\
    \189\000\199\000\252\255\253\255\254\255\223\000\042\001\209\000\
    \065\001\066\001\091\000\247\255\122\001\145\001\009\000\245\255\
    \242\255\243\255\244\255\222\255\241\255\239\255\238\255\235\255\
    \234\255\224\255\217\255\215\255\016\001\252\255\253\255\254\255\
    \084\000\255\255\241\001\251\255\089\001\252\255\253\255\254\255\
    \255\255\064\002\087\002\207\002\250\255\111\001\255\255\125\002\
    \252\255\253\255\254\255\030\003\251\255";
  Lexing.lex_backtrk = 
   "\255\255\255\255\042\000\039\000\255\255\255\255\255\255\030\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\041\000\
    \019\000\018\000\015\000\032\000\029\000\034\000\255\255\042\000\
    \005\000\004\000\255\255\255\255\255\255\000\000\255\255\006\000\
    \007\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \003\000\255\255\255\255\255\255\004\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default = 
   "\001\000\000\000\255\255\255\255\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\255\255\
    \255\255\255\255\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\000\000\255\255\255\255\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\053\000\000\000\000\000\000\000\
    \255\255\000\000\059\000\000\000\255\255\000\000\000\000\000\000\
    \000\000\255\255\255\255\068\000\000\000\255\255\000\000\255\255\
    \000\000\000\000\000\000\255\255\000\000";
  Lexing.lex_trans = 
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\028\000\027\000\000\000\000\000\028\000\000\000\000\000\
    \000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \028\000\015\000\022\000\000\000\000\000\006\000\003\000\023\000\
    \014\000\013\000\020\000\007\000\004\000\019\000\008\000\021\000\
    \025\000\024\000\024\000\024\000\024\000\024\000\024\000\024\000\
    \024\000\024\000\050\000\005\000\016\000\017\000\018\000\049\000\
    \048\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\010\000\047\000\009\000\046\000\029\000\
    \045\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\012\000\002\000\011\000\051\000\043\000\
    \042\000\039\000\035\000\057\000\000\000\000\000\038\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\034\000\034\000\
    \044\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\033\000\034\000\034\000\034\000\000\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\034\000\034\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\031\000\
    \031\000\031\000\031\000\031\000\031\000\031\000\031\000\000\000\
    \026\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\040\000\000\000\000\000\000\000\000\000\000\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\000\000\055\000\000\000\000\000\000\000\000\000\000\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\056\000\000\000\000\000\000\000\029\000\030\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\034\000\000\000\000\000\000\000\
    \000\000\034\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\061\000\000\000\000\000\000\000\000\000\
    \061\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \000\000\000\000\000\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\072\000\000\000\000\000\000\000\000\000\073\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\034\000\000\000\
    \000\000\000\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \000\000\000\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\037\000\000\000\061\000\000\000\000\000\
    \000\000\000\000\036\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\034\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \034\000\034\000\034\000\074\000\000\000\000\000\000\000\000\000\
    \000\000\065\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \000\000\000\000\000\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\000\000\000\000\000\000\000\000\000\000\000\000\071\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\034\000\034\000\034\000\034\000\034\000\034\000\
    \000\000\000\000\000\000\062\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \054\000\061\000\061\000\064\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\060\000\061\000\061\000\
    \061\000\000\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\066\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\066\000\066\000\066\000\066\000\066\000\066\000\061\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\061\000\061\000\
    \061\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\000\000\000\000\
    \000\000\066\000\066\000\066\000\066\000\066\000\066\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\075\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\000\000\
    \061\000\061\000\061\000\061\000\061\000\061\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\
    \070\000\063\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\069\000\070\000\070\000\070\000\000\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\070\000\070\000\
    \070\000\070\000\070\000\070\000\070\000\070\000\076\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\076\000\076\000\076\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\076\000\
    \076\000\076\000\076\000\076\000\076\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check = 
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\000\000\255\255\255\255\
    \255\255\255\255\255\255\038\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\003\000\000\000\000\000\000\000\000\000\007\000\
    \015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\016\000\000\000\017\000\000\000\
    \018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\002\000\019\000\
    \020\000\021\000\034\000\056\000\255\255\255\255\021\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\023\000\023\000\
    \019\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\255\255\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\023\000\023\000\023\000\
    \023\000\023\000\023\000\023\000\023\000\024\000\024\000\024\000\
    \024\000\024\000\024\000\024\000\024\000\024\000\024\000\025\000\
    \025\000\025\000\025\000\025\000\025\000\025\000\025\000\255\255\
    \000\000\031\000\031\000\031\000\031\000\031\000\031\000\031\000\
    \031\000\038\000\255\255\255\255\255\255\255\255\255\255\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\255\255\052\000\255\255\255\255\255\255\255\255\255\255\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\052\000\255\255\255\255\255\255\029\000\025\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\029\000\029\000\029\000\029\000\029\000\029\000\
    \029\000\029\000\030\000\030\000\030\000\030\000\030\000\030\000\
    \030\000\030\000\030\000\030\000\033\000\255\255\255\255\255\255\
    \255\255\033\000\255\255\030\000\030\000\030\000\030\000\030\000\
    \030\000\032\000\032\000\032\000\032\000\032\000\032\000\032\000\
    \032\000\032\000\032\000\060\000\255\255\255\255\255\255\255\255\
    \060\000\255\255\032\000\032\000\032\000\032\000\032\000\032\000\
    \255\255\255\255\255\255\030\000\030\000\030\000\030\000\030\000\
    \030\000\069\000\255\255\255\255\255\255\255\255\069\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\033\000\255\255\
    \255\255\255\255\032\000\032\000\032\000\032\000\032\000\032\000\
    \255\255\255\255\036\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\036\000\036\000\036\000\255\255\060\000\255\255\255\255\
    \255\255\255\255\033\000\036\000\036\000\036\000\036\000\036\000\
    \036\000\037\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \037\000\037\000\037\000\069\000\255\255\255\255\255\255\255\255\
    \255\255\060\000\037\000\037\000\037\000\037\000\037\000\037\000\
    \255\255\255\255\255\255\036\000\036\000\036\000\036\000\036\000\
    \036\000\255\255\255\255\255\255\255\255\255\255\255\255\069\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\037\000\037\000\037\000\037\000\037\000\037\000\
    \255\255\255\255\255\255\058\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \052\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\255\255\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \058\000\058\000\058\000\058\000\058\000\058\000\058\000\058\000\
    \065\000\065\000\065\000\065\000\065\000\065\000\065\000\065\000\
    \065\000\065\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\065\000\065\000\065\000\065\000\065\000\065\000\066\000\
    \066\000\066\000\066\000\066\000\066\000\066\000\066\000\066\000\
    \066\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \066\000\066\000\066\000\066\000\066\000\066\000\255\255\255\255\
    \255\255\065\000\065\000\065\000\065\000\065\000\065\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\071\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\071\000\071\000\071\000\255\255\
    \066\000\066\000\066\000\066\000\066\000\066\000\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\071\000\071\000\
    \071\000\071\000\071\000\071\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\067\000\
    \067\000\058\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\255\255\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
    \067\000\067\000\067\000\067\000\067\000\067\000\075\000\075\000\
    \075\000\075\000\075\000\075\000\075\000\075\000\075\000\075\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\075\000\
    \075\000\075\000\075\000\075\000\075\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\075\000\
    \075\000\075\000\075\000\075\000\075\000\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\067\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code = 
   "";
  Lexing.lex_backtrk_code = 
   "";
  Lexing.lex_default_code = 
   "";
  Lexing.lex_trans_code = 
   "";
  Lexing.lex_check_code = 
   "";
  Lexing.lex_code = 
   "";
}

let rec token lexbuf =
    __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 53 "lexer.mll"
             s
# 366 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 53 "lexer.mll"
               (id_or_kwd s)
# 370 "lexer.ml"

  | 1 ->
# 54 "lexer.mll"
                      ( token lexbuf)
# 375 "lexer.ml"

  | 2 ->
# 55 "lexer.mll"
         ( newline lexbuf; token lexbuf )
# 380 "lexer.ml"

  | 3 ->
# 56 "lexer.mll"
        (Teof)
# 385 "lexer.ml"

  | 4 ->
# 57 "lexer.mll"
        (CONST Int32.zero)
# 390 "lexer.ml"

  | 5 ->
let
# 58 "lexer.mll"
                         s
# 396 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 59 "lexer.mll"
      (try 
        CONST (Int32.of_string (s)) 
      with Failure _ -> 
        Format.eprintf "Warning: Constant overflow@."; CONST(Int32.zero)
      )
# 404 "lexer.ml"

  | 6 ->
let
# 64 "lexer.mll"
                         s
# 410 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) lexbuf.Lexing.lex_curr_pos in
# 65 "lexer.mll"
      (try 
        CONST (Int32.of_string ("0o" ^ s)) 
      with Failure _ -> 
        Format.eprintf "Warning: Constant overflow@."; CONST(Int32.zero)
      )
# 418 "lexer.ml"

  | 7 ->
let
# 70 "lexer.mll"
                            s
# 424 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) lexbuf.Lexing.lex_curr_pos in
# 71 "lexer.mll"
      (try 
        CONST (Int32.of_string ("0x" ^ s)) 
      with Failure _ -> 
        Format.eprintf "Warning: Constant overflow@."; CONST(Int32.zero)
      )
# 432 "lexer.ml"

  | 8 ->
let
# 76 "lexer.mll"
                      c
# 438 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 1) (lexbuf.Lexing.lex_curr_pos + -1) in
# 77 "lexer.mll"
      (CHARACTER  ((char_of_character (Lexing.from_string c))) )
# 442 "lexer.ml"

  | 9 ->
# 78 "lexer.mll"
         ( CHAINE (lire_CHAINE lexbuf) )
# 447 "lexer.ml"

  | 10 ->
# 79 "lexer.mll"
         ( comment1 lexbuf; token lexbuf )
# 452 "lexer.ml"

  | 11 ->
# 80 "lexer.mll"
         ( raise (Lexing_error ("no opened comment")) )
# 457 "lexer.ml"

  | 12 ->
# 81 "lexer.mll"
                        ( token lexbuf )
# 462 "lexer.ml"

  | 13 ->
# 82 "lexer.mll"
                       ( Teof )
# 467 "lexer.ml"

  | 14 ->
# 85 "lexer.mll"
         ( ARROW )
# 472 "lexer.ml"

  | 15 ->
# 86 "lexer.mll"
         ( OVER )
# 477 "lexer.ml"

  | 16 ->
# 87 "lexer.mll"
         ( OVER_OR_EQUAL )
# 482 "lexer.ml"

  | 17 ->
# 88 "lexer.mll"
         ( EQUAL_EQUAL )
# 487 "lexer.ml"

  | 18 ->
# 89 "lexer.mll"
         ( EQUAL )
# 492 "lexer.ml"

  | 19 ->
# 90 "lexer.mll"
         ( UNDER )
# 497 "lexer.ml"

  | 20 ->
# 91 "lexer.mll"
         ( UNDER_OR_EQUAL )
# 502 "lexer.ml"

  | 21 ->
# 92 "lexer.mll"
         ( NOT_EQUAL )
# 507 "lexer.ml"

  | 22 ->
# 93 "lexer.mll"
         ( PARENTHESIS_OPEN )
# 512 "lexer.ml"

  | 23 ->
# 94 "lexer.mll"
         ( PARENTHESIS_CLOSE )
# 517 "lexer.ml"

  | 24 ->
# 95 "lexer.mll"
         ( OPEN_BLOCK )
# 522 "lexer.ml"

  | 25 ->
# 96 "lexer.mll"
         ( CLOSE_BLOCK )
# 527 "lexer.ml"

  | 26 ->
# 97 "lexer.mll"
         ( INDEX_OPEN )
# 532 "lexer.ml"

  | 27 ->
# 98 "lexer.mll"
         ( INDEX_CLOSE )
# 537 "lexer.ml"

  | 28 ->
# 99 "lexer.mll"
         ( DOT )
# 542 "lexer.ml"

  | 29 ->
# 100 "lexer.mll"
         ( STAR )
# 547 "lexer.ml"

  | 30 ->
# 101 "lexer.mll"
         ( PLUS )
# 552 "lexer.ml"

  | 31 ->
# 102 "lexer.mll"
          ( PLUS_PLUS )
# 557 "lexer.ml"

  | 32 ->
# 103 "lexer.mll"
         ( MINUS )
# 562 "lexer.ml"

  | 33 ->
# 104 "lexer.mll"
          ( MINUS_MINUS )
# 567 "lexer.ml"

  | 34 ->
# 105 "lexer.mll"
        ( DIV )
# 572 "lexer.ml"

  | 35 ->
# 106 "lexer.mll"
         ( REM )
# 577 "lexer.ml"

  | 36 ->
# 107 "lexer.mll"
         ( SEMICOLON )
# 582 "lexer.ml"

  | 37 ->
# 108 "lexer.mll"
         ( COMMA )
# 587 "lexer.ml"

  | 38 ->
# 109 "lexer.mll"
         ( AND )
# 592 "lexer.ml"

  | 39 ->
# 110 "lexer.mll"
         ( GET_ADRESS )
# 597 "lexer.ml"

  | 40 ->
# 111 "lexer.mll"
         ( OR )
# 602 "lexer.ml"

  | 41 ->
# 112 "lexer.mll"
         ( NOT )
# 607 "lexer.ml"

  | 42 ->
let
# 113 "lexer.mll"
         c
# 613 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 113 "lexer.mll"
            ( raise (Lexing_error ("illegal character: " ^ String.make 1 c)) )
# 617 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment1 lexbuf =
    __ocaml_lex_comment1_rec lexbuf 52
and __ocaml_lex_comment1_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 116 "lexer.mll"
         ()
# 628 "lexer.ml"

  | 1 ->
# 117 "lexer.mll"
         (newline lexbuf; comment1 lexbuf;)
# 633 "lexer.ml"

  | 2 ->
# 118 "lexer.mll"
        ( raise (Lexing_error( "unfinished comment") ))
# 638 "lexer.ml"

  | 3 ->
# 119 "lexer.mll"
       (comment1 lexbuf)
# 643 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_comment1_rec lexbuf __ocaml_lex_state

and lire_CHAINE lexbuf =
    __ocaml_lex_lire_CHAINE_rec lexbuf 58
and __ocaml_lex_lire_CHAINE_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 122 "lexer.mll"
         ("")
# 654 "lexer.ml"

  | 1 ->
# 123 "lexer.mll"
         (raise(Lexing_error "unfinished String" ))
# 659 "lexer.ml"

  | 2 ->
# 124 "lexer.mll"
         (raise(Lexing_error "end of line before finishing string"))
# 664 "lexer.ml"

  | 3 ->
let
# 125 "lexer.mll"
                 c
# 670 "lexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 126 "lexer.mll"
      ((String.make 1 (char_of_character (Lexing.from_string c))) 
      ^(lire_CHAINE lexbuf))
# 675 "lexer.ml"

  | 4 ->
let
# 128 "lexer.mll"
         c
# 681 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 128 "lexer.mll"
           (raise(Lexing_error ("illegal character near: " ^ String.make 1 c )))
# 685 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_lire_CHAINE_rec lexbuf __ocaml_lex_state

and char_of_character lexbuf =
    __ocaml_lex_char_of_character_rec lexbuf 67
and __ocaml_lex_char_of_character_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
let
# 132 "lexer.mll"
                                             c
# 697 "lexer.ml"
= Lexing.sub_lexeme_char lexbuf lexbuf.Lexing.lex_start_pos in
# 132 "lexer.mll"
                                               (c)
# 701 "lexer.ml"

  | 1 ->
# 133 "lexer.mll"
          ('\\')
# 706 "lexer.ml"

  | 2 ->
# 134 "lexer.mll"
          ('\'')
# 711 "lexer.ml"

  | 3 ->
# 135 "lexer.mll"
           ('\"')
# 716 "lexer.ml"

  | 4 ->
let
# 136 "lexer.mll"
                                         c
# 722 "lexer.ml"
= Lexing.sub_lexeme lexbuf (lexbuf.Lexing.lex_start_pos + 2) (lexbuf.Lexing.lex_start_pos + 4) in
# 137 "lexer.mll"
            (char_of_int (int_of_string ("0x"^c)))
# 726 "lexer.ml"

  | 5 ->
# 138 "lexer.mll"
     (assert false)
# 731 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf; __ocaml_lex_char_of_character_rec lexbuf __ocaml_lex_state

;;

# 139 "lexer.mll"
 


# 741 "lexer.ml"
